{"version":3,"sources":["pages/pokemon.js","App.js","index.js"],"names":["getImageUrl","url","a","fetch","response","json","data","imgUrl","sprites","front_default","Image","useState","img","setImg","useEffect","then","className","src","style","width","convertName","name","s","String","slice","toUpperCase","map","input","en","ja","Name","japaName","setJapaName","Content","URL","forms","t","types","type","Pokemon","id","setData","App","ID","i","href","render","document","querySelector"],"mappings":"mLAEMA,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEACKC,MAAMF,GADX,cACZG,EADY,gBAECA,EAASC,OAFV,cAEZC,EAFY,OAGZC,EAASD,EAAKE,QAAQC,cAHV,kBAIXF,GAJW,2CAAH,sDAOXG,EAAQ,SAAC,GAAa,IAAXT,EAAU,EAAVA,IAAU,EACHU,mBAAS,MADN,mBAClBC,EADkB,KACbC,EADa,KAQzB,OANAC,qBAAU,WACRd,EAAYC,GAAKc,MAAK,SAACH,GACrBC,EAAOD,SAKT,4BAAQI,UAAU,SAChB,yBAAKC,IAAKL,EAAKM,MAAO,CAAEC,MAAO,WAK/BC,EAAW,uCAAG,WAAOC,GAAP,iBAAAnB,EAAA,6DACZoB,EAAI,IAAIC,OAAOF,GACrBA,EAAOC,EAAEE,MAAM,EAAG,GAAGC,cAAgBH,EAAEE,MAAM,GAF3B,SAGKrB,MACrB,wIAJgB,cAGZC,EAHY,gBAMCA,EAASC,OANV,qBAObqB,KAAI,SAACC,GACJA,EAAMC,KAAOP,IACfA,EAAOM,EAAME,OATC,kBAYXR,GAZW,4CAAH,sDAeXS,EAAO,SAAC,GAAc,IAAZT,EAAW,EAAXA,KAAW,EACOV,mBAAS,MADhB,mBAClBoB,EADkB,KACRC,EADQ,KASzB,OAPAlB,qBAAU,WACRM,EAAYC,GAAMN,MAAK,SAACgB,GACtBC,EAAYD,SAMd,6BACE,4BAAKA,KAKLE,EAAU,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACjB,GAAY,MAARA,EACF,OACE,yBAAKU,UAAU,WACb,0CAKN,IAAMkB,EAAM5B,EAAK6B,MAAM,GAAGlC,IACpBmC,EAAI9B,EAAK+B,MAGf,OACE,6BACE,kBAAC,EAAD,CAAOpC,IAAKiC,IACZ,kBAAC,EAAD,CAAMb,KAAMf,EAAKe,OAEjB,4CAEGe,EAAEV,KAAI,SAACC,GAAD,OAAWA,EAAMW,KAAKjB,KAAO,WA6B7BkB,EAvBC,SAAC,GAAY,IAAVC,EAAS,EAATA,GAAS,EACF7B,mBAAS,MADP,mBACnBL,EADmB,KACbmC,EADa,KAU1B,OARA3B,qBAAU,WACRX,MAAM,qCAAD,OAAsCqC,IACxCzB,MAAK,SAACX,GAAD,OAAcA,EAASC,UAC5BU,MAAK,SAACT,GACLmC,EAAQnC,QAEX,IAGD,6BACE,6BAASU,UAAU,QACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAASV,KAAMA,SChEZoC,EA7BH,WAGV,IAFA,IACMC,EAAK,CADC,IAEHC,EAAI,EAAGA,GAFJ,GAEcA,IACxBD,EAAGC,EAAI,GAAKA,EAGd,OACE,6BACE,6BAAS5B,UAAU,QACjB,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,gBACe,uBAAG6B,KAAK,8BAAR,eAKrB,yBAAK7B,UAAU,qCACZ2B,EAAGjB,KAAI,SAACkB,GAAD,OACN,yBAAK5B,UAAU,eACb,kBAAC,EAAD,CAASwB,GAAII,W,MCnBzBE,iBAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,c","file":"static/js/main.af3bdb51.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst getImageUrl = async (url) => {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n  const imgUrl = data.sprites.front_default;\r\n  return imgUrl;\r\n};\r\n\r\nconst Image = ({ url }) => {\r\n  const [img, setImg] = useState(null);\r\n  useEffect(() => {\r\n    getImageUrl(url).then((img) => {\r\n      setImg(img);\r\n    });\r\n  });\r\n\r\n  return (\r\n    <figure className=\"image\">\r\n      <img src={img} style={{ width: \"50%\" }} />\r\n    </figure>\r\n  );\r\n};\r\n\r\nconst convertName = async (name) => {\r\n  const s = new String(name);\r\n  name = s.slice(0, 1).toUpperCase() + s.slice(1);\r\n  const response = await fetch(\r\n    \"https://gist.githubusercontent.com/PonDad/93922f63c3143489e30c3716d3d176d2/raw/0ea137397f9701828ecd7da7d253168678646488/pokemon.json\"\r\n  );\r\n  const data = await response.json();\r\n  data.map((input) => {\r\n    if (input.en === name) {\r\n      name = input.ja;\r\n    }\r\n  });\r\n  return name;\r\n};\r\n\r\nconst Name = ({ name }) => {\r\n  const [japaName, setJapaName] = useState(null);\r\n  useEffect(() => {\r\n    convertName(name).then((japaName) => {\r\n      setJapaName(japaName);\r\n    });\r\n  });\r\n  //console.log(japaName);\r\n\r\n  return (\r\n    <div>\r\n      <h1>{japaName}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Content = ({ data }) => {\r\n  if (data == null) {\r\n    return (\r\n      <div className=\"content\">\r\n        <p>loading...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const URL = data.forms[0].url;\r\n  const t = data.types;\r\n  // const japaName = convertName(data.name);\r\n  //console.log(japaName);\r\n  return (\r\n    <div>\r\n      <Image url={URL} />\r\n      <Name name={data.name} />\r\n      {/*} <h1>{data.name}</h1>*/}\r\n      <p>\r\n        type ...&emsp;\r\n        {t.map((input) => input.type.name + \"  \")}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Pokemon = ({ id }) => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(data);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"hero\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <Content data={data} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pokemon;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Pokemon from \"./pages/pokemon\";\r\n\r\nconst App = () => {\r\n  const len = 32;\r\n  const ID = [len];\r\n  for (let i = 1; i <= len; i++) {\r\n    ID[i - 1] = i;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"hero\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <h1 className=\"title\">\r\n              Pokedex from <a href=\"https://pokeapi.co/docs/v2\">PokeAPI</a>\r\n            </h1>\r\n          </div>\r\n        </div>\r\n      </section>\r\n      <div className=\"columns is-vcentered is-multiline\">\r\n        {ID.map((i) => (\r\n          <div className=\"column is-3\">\r\n            <Pokemon id={i} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"bulma/css/bulma.css\";\r\n\r\nrender(<App />, document.querySelector(\"#content\"));\r\n"],"sourceRoot":""}